schema {
    query: Query
    mutation: Mutation
}
input CreateAccountInput {
	accountId: ID
	campaign: String
	city: String!
	country: String
	crustacean: String
	dairy: String
	deviceId: String
	diabetic: Boolean
	egg: Boolean
	email: String!
	firstName: String!
	fish: Boolean
	gluten: Boolean
	halal: Boolean
	kosher: String
	lastName: String!
	medium: String
	peanuts: Boolean
	phone: String
	referrer: String
	source: String
	soy: Boolean
	treeNuts: Boolean
	vegetarian: Boolean
	vegan: Boolean
	wheat: Boolean
}
input DeleteAccountInput {
	accountId: ID!
}


input UpdateAccountInput {
	accountId: ID!
	campaign: String
	city: String
	country: String
	crustacean: String
	dairy: String
	deviceId: String
	diabetic: Boolean
	egg: Boolean
	email: String
	firstName: String
	fish: Boolean
	gluten: Boolean
	halal: Boolean
	kosher: String
	lastName: String
	medium: String
	peanuts: Boolean
	phone: String
	referrer: String
	source: String
	soy: Boolean
	treeNuts: Boolean
	vegetarian: Boolean
	vegan: Boolean
	wheat: Boolean
}

input CreateReviewInput {
	accountId: ID!
	storeId: ID!
	itemIds: [ID]
	ratings: [ID]
	speed: Int
	service: Int
	text: String
}

input DeleteReviewInput {
	accountId: ID!
	reviewAt: AWSTimestamp!
}

input UpdateReviewInput {
	accountId: ID!
	reviewAt: AWSTimestamp!
	storeId: ID
	itemIds: [ID]
	ratings: [ID]
	speed: Int
	service: Int
	text: String
}

input CreateFavoriteInput {
	accountId: ID!
	itemId: ID!
	storeId: ID
}

input DeleteFavoriteInput {
	accountId: ID!
	itemId: ID!
}

input UpdateFavoriteInput {
	accountId: ID!
	itemId: ID!
	storeId: ID
}


#store
input TableStoreFilterInput {
	storeId: TableIDFilterInput
	accountId: TableIDFilterInput
	phone: TableStringFilterInput
	storeName: TableStringFilterInput
	password: TableStringFilterInput
	createdAt: TableStringFilterInput
	updatedAt: TableStringFilterInput
	zipCode: TableStringFilterInput
	latitude: TableFloatFilterInput
	longitude: TableFloatFilterInput
	minDrinkingAge: TableIntFilterInput
	maxGuestTime: TableIntFilterInput
	tags: TableStringFilterInput
	rating: TableFloatFilterInput
	ratingCount: TableIntFilterInput
	open: TableBooleanFilterInput
	active: TableBooleanFilterInput
	reviews: TableStringFilterInput
}

input CreateStoreInput {
	accountId: ID!
	associates: [AWSJSON]
	phone: String
	storeName: String
	password: String
	zipCode: String
	latitude: Float
	longitude: Float
	minDrinkingAge: Int
	maxGuestTime: Int
	tags: [String]
	rating: Float
	ratingCount: Int
	open: Boolean
	active: Boolean
	reviews: [String]
	items: [AWSJSON]
	# reservations: [AWSJSON]
	tables: [AWSJSON]
	orders: [AWSJSON]
}

input DeleteStoreInput {
	storeId: ID!
	accountId: ID!
}
input UpdateStoreInput {
	storeId: ID!
	accountId: ID!
	associates: [AWSJSON]
	phone: String
	storeName: String
	password: String
	createdAt: String
	updatedAt: String
	zipCode: String
	latitude: Float
	longitude: Float
	minDrinkingAge: Int
	maxGuestTime: Int
	tags: [String]
	rating: Float
	ratingCount: Int
	open: Boolean
	active: Boolean
	reviews: [String]
	items: [AWSJSON]
	# reservations: [AWSJSON]
	tables: [AWSJSON]
	orders: [AWSJSON]
}

#item input

input TableItemFilterInput {
	storeId: TableIDFilterInput
	itemId: TableIDFilterInput
	active: TableBooleanFilterInput
	category: TableStringFilterInput
	detail: TableStringFilterInput
	img: TableStringFilterInput
	itemName: TableStringFilterInput
	price: TableFloatFilterInput
	rating: TableFloatFilterInput
	ratingCount: TableIntFilterInput
	tags: TableStringFilterInput
}

input CreateItemInput {
	storeId: ID!
	active: Boolean
	category: String
	detail: String
	img: String
	itemName: String
	optionSet: AWSJSON
	price: Float
	rating: Float
	ratingCount: Int
	tags: [String]
}

input DeleteItemInput {
	storeId: ID!
	itemId: ID!
}



input UpdateItemInput {
	storeId: ID!
	itemId: ID!
	active: Boolean
	category: String
	detail: String
	img: String
	itemName: String
	optionSet: AWSJSON
	price: Float
	rating: Float
	ratingCount: Int
	tags: [String]
} 

input TableOrderFilterInput {
	accountIds: TableIntFilterInput
	additionalFees: TableFloatFilterInput
	completedAt: TableStringFilterInput
	completionAmount: TableFloatFilterInput
	createdAt: TableStringFilterInput
	createdFor: TableStringFilterInput
	orderId: TableIntFilterInput
	tableToken: TableStringFilterInput
}

input CreateOrdersInput {
  orderId: Int!
  accountIds: [String]
  additionalFees: Float
  completedAt: String
  completionAmount: Float
  createdAt: String
  createdFor: String
#   lines: [lines]
  tableToken: String
}

input DeleteOrdersInput {
	orderId: Int!
}
input UpdateOrdersInput {
  accountIds: [String]
  additionalFees: Float
  completedAt: String
  completionAmount: Float
  createdAt: String
  createdFor: String
#   lines: [lines]
  orderId: Int!
  tableToken: String
}


type Query {
    getAccount(id:ID!): Account
    allAccounts: [Account]
	getReview(accountId: ID!, reviewAt: AWSTimestamp!): review
	listReviews(filter: TableReviewFilterInput, limit: Int, nextToken: String): reviewConnection
	getFavorite(accountId: ID!, itemId: ID!): favorite
	listFavorites(filter: TableFavoriteFilterInput, limit: Int, nextToken: String): favoriteConnection
	getStore(accountId: ID!, storeId: ID!): store
	listStores(filter: TableStoreFilterInput, limit: Int, nextToken: String): storeConnection
    getItem(storeId: ID!, itemId: ID!): Item
	listItems(filter: TableItemFilterInput, limit: Int, nextToken: String): ItemConnection
	getOrder(orderId: Int!, createdAt: String!): order
	listOrder(filter: TableOrderFilterInput, limit: Int, nextToken: String): orderConnection

}
type Mutation {
    addAccount(input:CreateAccountInput!): Account
    updateAccount(input: UpdateAccountInput!): Account
	deleteAccount(input: DeleteAccountInput!): Account
	createReview(input: CreateReviewInput!): review
	updateReview(input: UpdateReviewInput!): review
	deleteReview(input: DeleteReviewInput!): review
	createFavorite(input: CreateFavoriteInput!): favorite
	updateFavorite(input: UpdateFavoriteInput!): favorite
	deleteFavorite(input: DeleteFavoriteInput!): favorite
	createStore(input: CreateStoreInput!): store
	updateStore(input: UpdateStoreInput!): store
	deleteStore(input: DeleteStoreInput!): store
	createItem(input: CreateItemInput!): Item
	updateItem(input: UpdateItemInput!): Item
	deleteItem(input: DeleteItemInput!): Item
	createOrder(input: CreateOrdersInput!): order
	addOrderCompletedAt(orderId: ID!, completedAt: String!): order
	updateOrder(input: UpdateOrdersInput!): order
	deleteOrder(input: DeleteOrdersInput!): order
	
}

type review {
	accountId: ID
	reviewAt: AWSTimestamp
	storeId: ID
	itemIds: [ID],
	ratings: [ID],
	speed: Int,
	service: Int,
	text: String,	
}

type favorite {
  accountId: ID
  itemId: ID
  item: Item
  storeId: ID
  store: store
	createdAt: String
	updatedAt: String
}

type favoriteConnection {
	items: [favorite]
	nextToken: String
}

type reviewConnection {
	items: [review]
	nextToken: String
}


type Account {
	accountId: ID
	campaign: String
	city: String
	country: String
	createdAt: String
	updatedAt: String
	crustacean: String
	dairy: String
	deviceId: String
	diabetic: Boolean
	egg: Boolean
	email: String
	firstName: String
	fish: Boolean
	gluten: Boolean
	halal: Boolean
	kosher: String
	lastName: String
	medium: String
	peanuts: Boolean
	phone: String
	referrer: String
	source: String
	soy: Boolean
	treeNuts: Boolean
	vegetarian: Boolean
	vegan: Boolean
	wheat: Boolean
}

type Item {
	storeId: ID!
  itemId: ID!
	createdAt: String
	updatedAt: String
  active: Boolean
  category: String
  detail: String
  img: String
  itemName: String
  # optionSet: [optionSet]
  price: Float
  rating: Float
  ratingCount: Int
  tags: [String]
}

type ItemConnection {
	items: [Item]
	nextToken: String
}


type store {
  storeId: ID
  accountId: ID
  associates: [Account]
  phone: String
  storeName: String
  password: String
  createdAt: String
  updatedAt: String
  zipCode: String
  latitude: Float
  longitude: Float
  minDrinkingAge: Int
  maxGuestTime: Int
  tags: [String]
  rating: Float
  ratingCount: Int
  items: [Item]
  open: Boolean
  active: Boolean
  reviews: [review]
#   reservations: [reservation]
#   tables: [table]
  orders: [order]
}


type storeConnection {
	items: [store]
	nextToken: String
}


type order {
	orderId: Int!
	accountIds: [String]
	additionalFees: Float
	completedAt: String
	completionAmount: Float
	createdAt: String
	# lines: [lines]
	createdFor: String
	tableToken: String
}

type orderConnection {
	items: [order]
	nextToken: String
}




input TableBooleanFilterInput {
	ne: Boolean
	eq: Boolean
}

input TableFloatFilterInput {
	ne: Float
	eq: Float
	le: Float
	lt: Float
	ge: Float
	gt: Float
	contains: Float
	notContains: Float
	between: [Float]
}

input TableIDFilterInput {
	ne: ID
	eq: ID
	le: ID
	lt: ID
	ge: ID
	gt: ID
	contains: ID
	notContains: ID
	between: [ID]
	beginsWith: ID
}

input TableIntFilterInput {
	ne: Int
	eq: Int
	le: Int
	lt: Int
	ge: Int
	gt: Int
	contains: Int
	notContains: Int
	between: [Int]
}

input TableReviewFilterInput {
	accountId: TableIDFilterInput
	reviewAt: TableIntFilterInput
	storeId: TableIDFilterInput
	itemIds: TableIDFilterInput
	ratings: TableIDFilterInput
	speed: TableIntFilterInput
	service: TableIntFilterInput
	text: TableStringFilterInput
}

input TableStringFilterInput {
	ne: String
	eq: String
	le: String
	lt: String
	ge: String
	gt: String
	contains: String
	notContains: String
	between: [String]
	beginsWith: String
}

input TableFavoriteFilterInput {
	accountId: TableIDFilterInput
	itemId: TableIDFilterInput
	storeId: TableIDFilterInput
}
